#!/bin/bash

# Auto-documentation script for Zed (no external dependencies)
PROJECT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || pwd)
DOCS_DIR="$PROJECT_ROOT/.docs"
CHECKLIST="$DOCS_DIR/PROGRESS.md"
PROMPTS_DIR="$DOCS_DIR/prompts"

mkdir -p "$DOCS_DIR"
mkdir -p "$PROMPTS_DIR"

# Initialize checklist if it doesn't exist
if [ ! -f "$CHECKLIST" ]; then
    cat > "$CHECKLIST" << 'EOF'
# 🎮 Coding Progress Tracker

## 📊 Project Overview
*Auto-generated documentation tracker*

---

## ✅ Completion Checklist

### Components Documented
- [ ] Initial setup

### Files Analysis
*No files analyzed yet*

### Suggestions
*Waiting for code analysis...*

---
EOF
    echo "*Last Updated: $(date)*" >> "$CHECKLIST"
fi

# Function to create a documentation prompt for Zed
create_zed_prompt() {
    local file="$1"
    local relative_path="${file#$PROJECT_ROOT/}"
    local filename=$(basename "$file")
    local extension="${filename##*.}"
    
    # Detect file type context
    local file_type="code"
    case "$extension" in
        svelte) file_type="Svelte component" ;; 
        js|jsx) file_type="JavaScript" ;; 
        ts|tsx) file_type="TypeScript" ;; 
        py) file_type="Python" ;; 
        go) file_type="Go" ;; 
        rs) file_type="Rust" ;; 
        java) file_type="Java" ;; 
    esac
    
    # Create prompt file for Zed assistant
    local prompt_file="$PROMPTS_DIR/${filename}.prompt.md"
    
    cat > "$prompt_file" << PROMPT
# Documentation Request for: $relative_path

**File Type:** $file_type
**Last Modified:** $(date)

## Task
Please analyze this $file_type file and create comprehensive documentation.

## Code to Analyze
\\`\\`$extension
$(cat "$file")
\
\
## Required Documentation Structure

### 1. Purpose
What does this file/component do?

### 2. Key Elements
- Main functions/classes/components
- Important variables or state
- Key logic flows

### 3. Dependencies
- Imports and external dependencies
- Internal module dependencies

### 4. Tailwind/Styling (if applicable)
- Key Tailwind classes used
- Styling patterns

### 5. Status & Completeness
- Estimated completion: X%
- What's implemented
- What might be missing

### 6. TODO & Suggestions
- [ ] Suggested improvements
- [ ] Missing tests
- [ ] Potential bugs or edge cases
- [ ] Performance optimizations

---
*Generated by Zed Auto-Docs*
PROMPT

    echo "📝 Created prompt: $prompt_file"
}

# Function to create basic analysis without AI
analyze_file_basic() {
    local file="$1"
    local relative_path="${file#$PROJECT_ROOT/}"
    local dir=$(dirname "$file")
    local filename=$(basename "$file")
    local readme_path="$dir/README.md"
    local extension="${filename##*.}"
    
    echo "🔍 Analyzing: $relative_path"
    
    # Detect file type
    local file_type="code"
    case "$extension" in
        svelte) file_type="Svelte component" ;;
        js|jsx) file_type="JavaScript" ;;
        ts|tsx) file_type="TypeScript" ;;
        py) file_type="Python" ;;
        go) file_type="Go" ;;
        rs) file_type="Rust" ;;
        java) file_type="Java" ;;
    esac
    
    # Extract code structure
    local functions=""
    local classes=""
    local imports=""
    local tailwind_classes=""
    
    case "$extension" in
        js|jsx|ts|tsx|svelte)
            functions=$(grep -E "^\s*(function|const|let|var).*=.*\(|^\s*async.*\(" "$file" 2>/dev/null | sed 's/^\[[:space:]]*//; s/\s*[^\s]*$//; s/^/"/; s/$/"/' | head -10)
            classes=$(grep -E "^\s*(class|export class)" "$file" 2>/dev/null | sed 's/^\[[:space:]]*//; s/\s*[^\s]*$//; s/^/"/; s/$/"/' | head -5)
            imports=$(grep -E "^import" "$file" 2>/dev/null | head -10)
            tailwind_classes=$(grep -oE 'class(Name)?="[^"]*"' "$file" 2>/dev/null | head -5)
            ;;
        py)
            functions=$(grep -E "^\s*def " "$file" 2>/dev/null | sed 's/^\[[:space:]]*//; s/\s*[^\s]*$//; s/^/"/; s/$/"/' | head -10)
            classes=$(grep -E "^\s*class " "$file" 2>/dev/null | sed 's/^\[[:space:]]*//; s/\s*[^\s]*$//; s/^/"/; s/$/"/' | head -5)
            imports=$(grep -E "^(import|from)" "$file" 2>/dev/null | head -10)
            ;;
        go)
            functions=$(grep -E "^func " "$file" 2>/dev/null | head -10)
            imports=$(grep -E "^\s*\"" "$file" 2>/dev/null | head -10)
            ;;
        rs)
            functions=$(grep -E "^\s*fn " "$file" 2>/dev/null | sed 's/^\[[:space:]]*//; s/\s*[^\s]*$//; s/^/"/; s/$/"/' | head -10)
            imports=$(grep -E "^use " "$file" 2>/dev/null | head -10)
            ;;
    esac
    
    # Count lines for completion estimate
    local total_lines=$(wc -l < "$file")
    local comment_lines=$(grep -E "^\s*(//|#|/\*|\*)" "$file" 2>/dev/null | wc -l)
    local completion=$((total_lines > 50 ? 70 : 40))
    
    # Create documentation
    cat > /tmp/analysis.md << ANALYSIS
# $(basename "$dir")

## 📄 File: \`$filename\`

### Purpose
$file_type - $([ $total_lines -gt 100 ] && echo "Complex implementation" || echo "Standard implementation")

### 🔧 Key Components

${functions:+#### Functions
\`\`\`
$functions
\`\`\`
}

${classes:+#### Classes
\`\`\`
$classes
\`\`\`
}

### 📦 Dependencies

${imports:+\`\`\`
$imports
\`\`\`
}

${tailwind_classes:+### 🎨 Styling
Uses Tailwind CSS:
\`\`\`
$tailwind_classes
\`\`\`
}

### 📊 Status
- **Lines of Code:** $total_lines
- **Estimated Completion:** ${completion}%
- **Last Modified:** $(date '+%Y-%m-%d')

### ✅ Next Steps
- [ ] Add comprehensive documentation
- [ ] Add unit tests
- [ ] Code review
- [ ] Performance optimization

---
*Auto-generated by Zed Auto-Docs | For better docs, use Zed Assistant with prompt in \".docs/prompts/\"*
ANALYSIS

    # Update or create README
    if [ -f "$readme_path" ]; then
        if grep -q "🤖 Auto-Generated Insights" "$readme_path"; then
            sed -i.bak '/## 🤖 Auto-Generated Insights/,$d' "$readme_path"
        fi
        echo -e "\n---\n## 🤖 Auto-Generated Insights\n*Updated: $(date '+%Y-%m-%d %H:%M:%S')*\n" >> "$readme_path"
        cat /tmp/analysis.md >> "$readme_path"
        rm -f "${readme_path}.bak"
    else
        cat /tmp/analysis.md > "$readme_path"
    fi
    
    echo "✅ Updated: $readme_path"
    
    # Also create a Zed prompt for better documentation
    create_zed_prompt "$file"
}

# Determine which files to analyze
if [ -n "$CHANGED_FILES_LIST" ]; then
    for file in $CHANGED_FILES_LIST; do
        if [ -f "$file" ]; then
            analyze_file_basic "$file"
        fi
    done
else
    find "$PROJECT_ROOT" -type f \
        \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.py" -o -name "*.go" -o -name "*.rs" -o -name "*.java" -o -name "*.svelte" \) \
        -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/.docs/*" \
        -mmin -5 | while read -r file; do
        analyze_file_basic "$file"
    done
fi

# Update main checklist
echo "📝 Updating progress checklist..."

total_files=$(find "$PROJECT_ROOT" -type f \
    \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.py" -o -name "*.go" -o -name "*.rs" -o -name "*.java" -o -name "*.svelte" \) \
    -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/.docs/*" | wc -l)

documented=$(find "$PROJECT_ROOT" -name "README.md" -not -path "*/.docs/*" -not -path "*/node_modules/*" | wc -l)

completion=$((total_files > 0 ? documented * 100 / total_files : 0))

cat > "$CHECKLIST" << EOF
# 🎮 Coding Progress Tracker

**Last Updated:** $(date '+%Y-%m-%d %H:%M:%S')  
**Files Tracked:** $total_files  
**Components Documented:** $documented  
**Completion:** ${completion}%

---

## ✅ Documented Components

EOF

find "$PROJECT_ROOT" -name "README.md" -not -path "*/.docs/*" -not -path "*/node_modules/*" | sort | while read readme; do
    dir=$(dirname "$readme")
    name=$(basename "$dir")
    rel_path="${readme#$PROJECT_ROOT/}"
    echo "- ✅ **$name** - [\`$rel_path\`]($rel_path)" >> "$CHECKLIST"
done

cat >> "$CHECKLIST" << EOF

## 📁 Needs Documentation

EOF

find "$PROJECT_ROOT" -type d -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/.docs/*" -mindepth 1 -maxdepth 3 | while read dir; do
    if [ ! -f "$dir/README.md" ]; then
        file_count=$(find "$dir" -maxdepth 1 -type f \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.py" -o -name "*.go" -o -name "*.rs" -o -name "*.java" -o -name "*.svelte" \) 2>/dev/null | wc -l)
        if [ "$file_count" -gt 0 ]; then
            rel_path="${dir#$PROJECT_ROOT/}"
            echo "- [ ] \`$rel_path\` ($file_count files)" >> "$CHECKLIST"
        fi
    fi
done | head -20

cat >> "$CHECKLIST" << EOF

---

## 🎯 Workflow

### Automatic (Basic Docs)
The watcher creates basic documentation automatically every 15 seconds.

### Enhanced with Zed Assistant
For better documentation:
1. Check \".docs/prompts/\" for generated prompts
2. Open a prompt file in Zed
3. Select the prompt text and ask Zed Assistant
4. Copy the response into the component's README.md

### Manual Trigger
- Press \`cmd-shift-p\` and run "Update Documentation"

---

*💡 Tip: Use Zed's Assistant (cmd-") with the generated prompts for AI-powered documentation*

EOF

echo "✨ Documentation update complete!"
echo "📖 View progress: $CHECKLIST"
echo "🤖 AI prompts available in: $PROMPTS_DIR"